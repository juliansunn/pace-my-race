# Generated by Django 3.2 on 2023-09-29 14:09

from django.conf import settings
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('clerk_id', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('is_private', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('state', models.IntegerField(choices=[(1, 'Alabama'), (2, 'Alaska'), (3, 'Arizona'), (4, 'Arkansas'), (5, 'California'), (6, 'Canal'), (7, 'Colorado'), (8, 'Connecticut'), (9, 'Delaware'), (10, 'District'), (11, 'Florida'), (12, 'Georgia'), (13, 'Guam'), (14, 'Hawaii'), (15, 'Idaho'), (16, 'Illinois'), (17, 'Indiana'), (18, 'Iowa'), (19, 'Kansas'), (20, 'Kentucky'), (21, 'Louisiana'), (22, 'Maine'), (23, 'Maryland'), (24, 'Massachusetts'), (25, 'Michigan'), (26, 'Minnesota'), (27, 'Mississippi'), (28, 'Missouri'), (29, 'Montana'), (30, 'Nebraska'), (31, 'Nevada'), (32, 'New Hampshire'), (33, 'New Jersey'), (34, 'New Mexico'), (35, 'New York'), (36, 'North Carolina'), (37, 'North Dakota'), (38, 'Ohio'), (39, 'Oklahoma'), (40, 'Oregon'), (41, 'Pennsylvania'), (42, 'Puerto Rico'), (43, 'Rhode Island'), (44, 'South Carolina'), (45, 'South Dakota'), (46, 'Tennessee'), (47, 'Texas'), (48, 'Utah'), (49, 'Vermont'), (50, 'Virgin Islands'), (51, 'Virginia'), (52, 'Washington'), (53, 'West Virginia'), (54, 'Wisconsin'), (55, 'Wyoming')])),
                ('name', models.CharField(max_length=255)),
                ('zip_code', models.IntegerField(blank=True, null=True)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
            ],
            options={
                'unique_together': {('name', 'zip_code', 'state')},
            },
        ),
        migrations.CreateModel(
            name='Coach',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('coach_type', models.CharField(choices=[('PACE', 'Pacer'), ('COACH', 'Coach')], default='COACH', max_length=50)),
                ('bio', models.TextField(blank=True)),
                ('expertise', models.SmallIntegerField(choices=[(0, 'None Specified'), (1, 'None Specified'), (2, 'Beginner'), (3, 'Intermediate'), (4, 'Advanced'), (5, 'Expert'), (6, 'Professional Runner')], default=0, help_text='value to give a coaches experience for users to select against', max_length=2)),
            ],
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('city', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_DEFAULT, related_name='city_races', to='api.city')),
                ('coached_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='coaching_groups', to='api.coach')),
                ('members', models.ManyToManyField(blank=True, related_name='training_groups', to=settings.AUTH_USER_MODEL)),
                ('private_user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='private_groups', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Race',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default=None, max_length=255)),
                ('link', models.URLField(blank=True, default=None, null=True)),
                ('image', models.ImageField(blank=True, default=None, null=True, upload_to='')),
                ('description', models.TextField(blank=True, default=None, null=True)),
                ('registration_open', models.BooleanField(default=True)),
                ('registration_deadline', models.DateTimeField(default=None)),
                ('race_start', models.DateTimeField()),
                ('city', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.city')),
            ],
        ),
        migrations.CreateModel(
            name='RaceType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('distance', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('surface', models.SmallIntegerField(choices=[(0, 'Not Specified'), (1, 'Road'), (2, 'Trail'), (3, 'Road/Trail'), (4, 'Track')], default=0, max_length=2)),
                ('description', models.TextField()),
                ('distance_unit', models.SmallIntegerField(choices=[(0, 'Kilometers'), (1, 'Miles')], default=0, max_length=2)),
            ],
        ),
        migrations.CreateModel(
            name='PacingGroup',
            fields=[
                ('group_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='api.group')),
                ('pace_target', models.DurationField(blank=True, default=None, null=True)),
            ],
            bases=('api.group',),
        ),
        migrations.CreateModel(
            name='TrainingGroup',
            fields=[
                ('group_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='api.group')),
                ('level', models.SmallIntegerField(choices=[(0, 'None Specified'), (1, 'Beginner'), (2, 'Intermediate'), (3, 'Advanced')], default=0, max_length=2)),
            ],
            bases=('api.group',),
        ),
        migrations.CreateModel(
            name='UserFollowing',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('following_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='followers', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='following', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='RaceRegistration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('registration_time', models.DateTimeField(auto_now_add=True)),
                ('race', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.race')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='race',
            name='participants',
            field=models.ManyToManyField(related_name='races_participated', through='api.RaceRegistration', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='race',
            name='type',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.racetype'),
        ),
        migrations.AddField(
            model_name='group',
            name='race',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_DEFAULT, related_name='race_groups', to='api.race'),
        ),
        migrations.AddField(
            model_name='coach',
            name='distance_preferences',
            field=models.ManyToManyField(default=None, related_name='preferred_coaches', to='api.RaceType'),
        ),
        migrations.AddField(
            model_name='coach',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='coach', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='user',
            name='home_city',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='city_runners', to='api.city'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AddConstraint(
            model_name='userfollowing',
            constraint=models.UniqueConstraint(fields=('user_id', 'following_user_id'), name='unique_followers'),
        ),
        migrations.AddField(
            model_name='pacinggroup',
            name='pacers',
            field=models.ManyToManyField(blank=True, limit_choices_to={'coach_type': 'PACE'}, related_name='pacing_groups', to='api.Coach'),
        ),
    ]
